Given a string sequence consisting of the characters '(', ')', '[', ']', '{', and '}'. Your task is to determine whether or not the sequence is a valid bracket sequence.

The Valid bracket sequence is defined in the following way:

An empty bracket sequence is a valid bracket sequence.
If S is a valid bracket sequence then (S), [S] and {S} are also valid.
If A and B are valid bracket sequences then AB is also valid.
Example

For sequence = "()", the output should be solution(sequence) = true;
For sequence = "()[]{}", the output should be solution(sequence) = true;
For sequence = "(]", the output should be solution(sequence) = false;
For sequence = "([)]", the output should be solution(sequence) = false;
For sequence = "{[]}", the output should be solution(sequence) = true.

function solution(sequence) {
    const stack = [];
    const openingBrackets = ['(', '[', '{'];
    const closingBrackets = [')', ']', '}'];
    const bracketPairs = {
        '(': ')',
        '[': ']',
        '{': '}',
    };

    for (let i = 0; i < sequence.length; i++) {
        const char = sequence[i];

    if (openingBrackets.includes(char)) {
        stack.push(char);
    } else if (closingBrackets.includes(char)) {
        if (stack.length === 0) {
            return false;
        }

        const top = stack.pop();
        if (bracketPairs[top] !== char) {
            return false;
        }
    }
  }

  return stack.length === 0;
}
